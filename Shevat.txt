import pandas as pd
import os

# File paths
payact_file = "path/to/payact.xlsx"  # Replace with your actual file path
gl_file = "path/to/gl.xlsx"          # Replace with your actual file path
master_file = "path/to/master.xlsx"  # Replace with your desired master file path

# Load input files
payact_df = pd.read_excel(payact_file)
gl_df = pd.read_excel(gl_file)

# Debug: Print GL data to confirm it is loaded
print("GL Data Loaded:")
print(gl_df)

# Function to append raw data without grouping, ensuring all columns are retained
def append_and_sum_raw(file_path, new_data, sheet_name):
    if not os.path.exists(file_path):
        # Create the file and write the data if it doesn't exist
        with pd.ExcelWriter(file_path, engine="openpyxl") as writer:
            new_data.to_excel(writer, sheet_name=sheet_name, index=False)
    else:
        try:
            # Load existing data
            existing_data = pd.read_excel(file_path, sheet_name=sheet_name)
            # Combine existing and new data
            combined_data = pd.concat([existing_data, new_data], ignore_index=True)
        except ValueError:
            # If the sheet doesn't exist, use only new data
            combined_data = new_data

        # Write the combined data back to the sheet
        with pd.ExcelWriter(file_path, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
            combined_data.to_excel(writer, sheet_name=sheet_name, index=False)

# Function to append and group Red Pivot
def append_and_group_red_pivot(file_path, new_red_pivot, sheet_name):
    if os.path.exists(file_path):
        try:
            # Load existing Red Pivot
            existing_data = pd.read_excel(file_path, sheet_name=sheet_name)
            # Combine existing and new data
            combined_data = pd.concat([existing_data, new_red_pivot], ignore_index=True)
        except ValueError:
            # If the sheet doesn't exist, use only new data
            combined_data = new_red_pivot
    else:
        # If the file doesn't exist, use only new data
        combined_data = new_red_pivot

    # Group by Account and sum the amounts
    grouped_data = combined_data.groupby('Account', as_index=False)['Amount'].sum()

    # Write the updated Red Pivot back to the sheet
    with pd.ExcelWriter(file_path, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        grouped_data.to_excel(writer, sheet_name=sheet_name, index=False)

# Function to update Tally Res, merge duplicate accounts, and recalculate Grand Totals
def update_tally_res(file_path, new_tally_res, sheet_name):
    if os.path.exists(file_path):
        try:
            # Load existing Tally Res
            existing_data = pd.read_excel(file_path, sheet_name=sheet_name)
            # Remove any existing "Grand Total" rows
            existing_data = existing_data[existing_data['Account'] != 'Grand Total']
            # Combine existing and new data
            combined_data = pd.concat([existing_data, new_tally_res], ignore_index=True)
        except ValueError:
            # If the sheet doesn't exist, use only new data
            combined_data = new_tally_res
    else:
        # If the file doesn't exist, use only new data
        combined_data = new_tally_res

    # Group by Account to merge duplicate accounts and sum their values
    grouped_data = combined_data.groupby('Account', as_index=False).sum()

    # Recalculate Grand Totals
    grand_total_row = pd.DataFrame({
        'Account': ['Grand Total'],
        'Amount': [grouped_data['Amount'].sum()],
        'Debit Amount': [grouped_data['Debit Amount'].sum()],
        'Credit Amount': [grouped_data['Credit Amount'].sum()],
        'Total': [grouped_data['Total'].sum()]
    })

    # Add Grand Total to the grouped dataset
    grouped_data_with_total = pd.concat([grouped_data, grand_total_row], ignore_index=True)

    # Write the updated Tally Res back to the sheet
    with pd.ExcelWriter(file_path, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
        grouped_data_with_total.to_excel(writer, sheet_name=sheet_name, index=False)

# Process payact
append_and_sum_raw(master_file, payact_df, "payact")

# Process Daily Consolidate
filtered_gl = gl_df[(gl_df['Type'] == 'res') & (gl_df['Terminal'] == 'z@td')]
append_and_sum_raw(master_file, filtered_gl, "Daily Consolidate")

# Process Manual Voucher
manual_voucher = gl_df[(gl_df['Type'] == 'res') & (gl_df['Terminal'] != 'z@td')].copy()
if not manual_voucher.empty:
    manual_voucher['D/C'] = manual_voucher['Amount'].apply(lambda x: 'Debit' if x < 0 else 'Credit')
    manual_voucher['Amount'] = manual_voucher['Amount'].abs()
    append_and_sum_raw(master_file, manual_voucher, "Manual Voucher")

# Process Credit Pivot
credit_pivot = manual_voucher[manual_voucher['D/C'] == 'Credit'].groupby('Account', as_index=False)['Amount'].sum()
credit_pivot = credit_pivot.rename(columns={'Amount': 'Credit Amount'})

# Process Debit Pivot
debit_pivot = manual_voucher[manual_voucher['D/C'] == 'Debit'].groupby('Account', as_index=False)['Amount'].sum()
debit_pivot = debit_pivot.rename(columns={'Amount': 'Debit Amount'})

# Process and save Red Pivot
red_pivot = filtered_gl.groupby('Account', as_index=False)['Amount'].sum()
append_and_group_red_pivot(master_file, red_pivot, "Red Pivot")  # Append and group Red Pivot

# Create Tally Res with Grand Totals
tally_res = red_pivot.copy()
tally_res = pd.merge(tally_res, debit_pivot, on='Account', how='left')
tally_res = pd.merge(tally_res, credit_pivot, on='Account', how='left')
tally_res['Debit Amount'] = tally_res['Debit Amount'].fillna(0)
tally_res['Credit Amount'] = tally_res['Credit Amount'].fillna(0)
tally_res['Total'] = tally_res['Amount'] - tally_res['Debit Amount'] + tally_res['Credit Amount']

# Update Tally Res in the master file with merged accounts and recalculated Grand Totals
update_tally_res(master_file, tally_res, "Tally Res")

print("Master file updated successfully.")
