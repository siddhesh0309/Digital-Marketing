import pandas as pd
import os
import fnmatch
from datetime import datetime

# Function to find the latest file
def find_file(filename_pattern, basedir="C://Users/"):
    latest_file = None
    latest_time = 0
    for user_folder in os.listdir(basedir):
        user_path = os.path.join(basedir, user_folder, 'desktop', 'TDSReconsilation', 'Daily', 'input')
        if os.path.isdir(user_path):
            for dirpath, dirnames, filenames in os.walk(user_path):
                for filename in fnmatch.filter(filenames, filename_pattern):
                    path = os.path.join(dirpath, filename)
                    file_mtime = os.path.getmtime(path)
                    if file_mtime > latest_time:
                        latest_time = file_mtime
                        latest_file = path
    if not latest_file:
        print(f"Cannot find file {filename_pattern}")
    return latest_file

# Function to create output folder
def create_output_folder(base_path):
    today = datetime.now().strftime('%y-%m-%d')
    output_folder = os.path.join(base_path, 'output', today)
    os.makedirs(output_folder, exist_ok=True)
    return output_folder

# Initialize variables
updated_date = datetime.now().strftime('%d.%m.%Y')

# Simulate finding files (you can replace this with actual file finding logic)
latest_Payacct_file = find_file('Payacct*')
latest_Gl_file = find_file('Res_NonRes_GL*')

# Load the data (simulated here; replace with actual data loading)
db_GL = pd.read_excel(latest_Gl_file, engine='pyxlsb', header=1)
df_payact = pd.read_excel(latest_Payacct_file, engine='openpyxl', header=1)

user_folder = os.path.dirname(latest_Payacct_file)
output_folder = create_output_folder(user_folder)

# Processing data for filtering and pivots
df_copying_filtered = db_GL[(db_GL['Type'] == 'Res') & (db_GL['Capture_Terminal_ID'] == 'Z@TD')]

# RES Pivot
res_pivot = df_copying_filtered.groupby('ACCOUNT')['LCY_TRAN_AMT'].sum().reset_index()
res_pivot.columns = ['ACCOUNT', 'SUM LCY_TRAN_AMT']

# Manual processing
manual_res = db_GL[(db_GL['Type'] == 'Res') & (db_GL['Capture_Terminal_ID'] != 'Z@TD')]
manual_res['debit/credit'] = manual_res['TRAN_AMT'].apply(lambda x: 'Debit' if '-' in str(x) else 'Credit')
manual_res['LCY_TRAN_AMT'] = manual_res['LCY_TRAN_AMT'].abs()

credit_data = manual_res[manual_res['debit/credit'] == 'Credit']
debit_data = manual_res[manual_res['debit/credit'] == 'Debit']

credit_pivot = credit_data.groupby('ACCOUNT')['LCY_TRAN_AMT'].sum().reset_index()
credit_pivot.columns = ['ACCOUNT', 'CREDIT LCY_TRAN_AMT']

debit_pivot = debit_data.groupby('ACCOUNT')['LCY_TRAN_AMT'].sum().reset_index()
debit_pivot.columns = ['ACCOUNT', 'DEBIT LCY_TRAN_AMT']

# Joining data
Res_acc_Non_Res_Credit = res_pivot.join(credit_pivot.set_index('ACCOUNT'), on='ACCOUNT')
Res_acc_Non_Res_Debit = res_pivot.join(debit_pivot.set_index('ACCOUNT'), on='ACCOUNT')

final_summary = pd.merge(Res_acc_Non_Res_Credit, Res_acc_Non_Res_Debit, on=['ACCOUNT', 'SUM LCY_TRAN_AMT'], how='outer')
final_summary.fillna(0, inplace=True)

# Adding Ledger Balance and Calculating Totals
payact_payments = df_payact[['AccountNO', 'Ledger _Balance']]
final_summary = final_summary.merge(payact_payments, left_on='ACCOUNT', right_on='AccountNO', how='left')
final_summary.drop(columns=['AccountNO'], inplace=True)

final_summary['Total'] = final_summary['SUM LCY_TRAN_AMT'] - final_summary['DEBIT LCY_TRAN_AMT'] + final_summary['CREDIT LCY_TRAN_AMT']
final_summary['Difference'] = final_summary['Total'] == final_summary['Ledger _Balance']

# Remove rows without account numbers
final_summary = final_summary[final_summary['ACCOUNT'].notna()]

# Remove existing "Grand Total" rows if they exist
final_summary = final_summary[final_summary['ACCOUNT'] != 'Grand Total']

# Recalculate the "Grand Total" row
grand_total_row = {
    'ACCOUNT': 'Grand Total',
    'SUM LCY_TRAN_AMT': final_summary['SUM LCY_TRAN_AMT'].sum(),
    'CREDIT LCY_TRAN_AMT': final_summary['CREDIT LCY_TRAN_AMT'].sum(),
    'DEBIT LCY_TRAN_AMT': final_summary['DEBIT LCY_TRAN_AMT'].sum(),
    'Ledger _Balance': final_summary['Ledger _Balance'].sum(),
    'Total': final_summary['Total'].sum(),
    'Difference': True
}
grand_total_row_df = pd.DataFrame([grand_total_row])

# Append the "Grand Total" row
final_summary = pd.concat([final_summary, grand_total_row_df], ignore_index=True)

# Rename columns for final output
final_summary.rename(
    columns={
        'ACCOUNT': 'BRANCH',
        'SUM LCY_TRAN_AMT': 'System Breakup- Z@TD',
        'CREDIT LCY_TRAN_AMT': 'MANUAL CREDIT',
        'DEBIT LCY_TRAN_AMT': 'MANUAL DEBIT',
        'Ledger _Balance': 'Payments'
    },
    inplace=True
)

# Save the final corrected file to Excel
final_output_path = os.path.join(output_folder, f'Daily_Reconsilation_{updated_date}.xlsx')
final_summary.to_excel(final_output_path, sheet_name='Tally-Res', index=False)

print(f"Output saved to: {final_output_path}")
