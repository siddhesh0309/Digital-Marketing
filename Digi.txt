import pandas as pd
import os
import numpy as np
from glob import glob
from datetime import datetime
from pathlib import Path
import fnmatch

def find_file(filename_pattern, basedir="C://Users/"):
    latest_file = None
    latest_time = 0
    for user_folder in os.listdir(basedir):
        user_path = os.path.join(basedir, user_folder, 'desktop', 'TDSReconsilation', 'Daily', 'input')
        if os.path.isdir(user_path):
            for dirpath, dirnames, filenames in os.walk(user_path):
                for filename in fnmatch.filter(filenames, filename_pattern):
                    path = os.path.join(dirpath, filename)
                    file_mtime = os.path.getmtime(path)
                    if file_mtime > latest_time:
                        latest_time = file_mtime
                        latest_file = path
    if not latest_file:
        print(f"Cannot find file {filename_pattern}")
    return latest_file

latest_Payacct_file = find_file('Payacct*')
print(latest_Payacct_file)
latest_Gl_file = find_file('Res_NonRes_GL*')
print(latest_Gl_file)

def create_output_folder(base_path):
    today = datetime.now().strftime('%y-%m-%d')
    output_folder = os.path.join(base_path, 'output', today)
    os.makedirs(output_folder, exist_ok=True)
    return output_folder

updated_date = datetime.now().strftime('%d.%m.%Y')

db_GL = pd.read_excel(latest_Gl_file, engine='pyxlsb', header=1)
df_payact = pd.read_excel(latest_Payacct_file, engine='openpyxl', header=1)

user_folder = os.path.dirname(latest_Payacct_file)
output_folder = create_output_folder(user_folder)

# Process data
db_payact = pd.read_excel(latest_Payacct_file)
db_copying = db_payact[['AccountNO', 'Ledger _Balance', 'Classification']]

df_GL = pd.read_excel(latest_Gl_file)
df_copying_filtered = df_GL[(df_GL['Type'] == 'Res') & (df_GL['Capture_Terminal_ID'] == 'Z@TD')]

# RES Pivot
df_copying_filtered_unique = df_copying_filtered.copy()
res_pivot = df_copying_filtered_unique.groupby('ACCOUNT')['LCY_TRAN_AMT'].sum().reset_index()
res_pivot.columns = ['ACCOUNT', 'SUM LCY_TRAN_AMT']
res_pivot.loc[len(res_pivot)] = ['Grand Total', res_pivot['SUM LCY_TRAN_AMT'].sum()]

# Datewise Pivot
date_pivot = df_copying_filtered_unique.groupby('POSTING_DATE')['LCY_TRAN_AMT'].sum().reset_index()
date_pivot.columns = ['POSTING_DATE', 'SUM LCY_TRAN_AMT']
date_pivot.loc[len(date_pivot)] = ['Grand Total', date_pivot['SUM LCY_TRAN_AMT'].sum()]

# Manual RES
manual_res = df_GL[(df_GL['Type'] == 'Res') & (df_GL['Capture_Terminal_ID'] != 'Z@TD')]
manual_res['debit/credit'] = manual_res['TRAN_AMT'].apply(lambda x: 'Debit' if '-' in str(x) else 'Credit')
manual_res['LCY_TRAN_AMT'] = manual_res['LCY_TRAN_AMT'].abs()

# Manual Pivot
credit_data = manual_res[manual_res['debit/credit'] == 'Credit']
debit_data = manual_res[manual_res['debit/credit'] == 'Debit']

credit_pivot = credit_data.groupby('ACCOUNT')['LCY_TRAN_AMT'].sum().reset_index()
credit_pivot.columns = ['ACCOUNT', 'CREDIT LCY_TRAN_AMT']
credit_pivot.loc[len(credit_pivot)] = ['Grand Total', credit_pivot['CREDIT LCY_TRAN_AMT'].sum()]

debit_pivot = debit_data.groupby('ACCOUNT')['LCY_TRAN_AMT'].sum().reset_index()
debit_pivot.columns = ['ACCOUNT', 'DEBIT LCY_TRAN_AMT']
debit_pivot.loc[len(debit_pivot)] = ['Grand Total', debit_pivot['DEBIT LCY_TRAN_AMT'].sum()]

# Final Summary
final_summary = res_pivot.merge(credit_pivot.set_index('ACCOUNT'), on='ACCOUNT', how='left')
final_summary = final_summary.merge(debit_pivot.set_index('ACCOUNT'), on='ACCOUNT', how='left')
final_summary.fillna(0, inplace=True)

final_summary['Total'] = (
    final_summary['SUM LCY_TRAN_AMT']
    - final_summary['DEBIT LCY_TRAN_AMT']
    + final_summary['CREDIT LCY_TRAN_AMT']
)

final_summary['Difference'] = final_summary['Total'] == final_summary['SUM LCY_TRAN_AMT']
final_summary.rename(columns={
    'ACCOUNT': 'BRANCH',
    'SUM LCY_TRAN_AMT': 'System Breakup- Z@TD',
    'CREDIT LCY_TRAN_AMT': 'MANUAL CREDIT',
    'DEBIT LCY_TRAN_AMT': 'MANUAL DEBIT',
}, inplace=True)

path = os.path.join(output_folder, f'Daily_Reconsilation_{updated_date}.xlsx')

# Remove duplicate "Grand Total" rows and write to Excel
if os.path.exists(path):
    with pd.ExcelWriter(path, mode='a', engine='openpyxl', if_sheet_exists='overlay') as writer:
        db_copying = db_copying[~db_copying['AccountNO'].str.contains('Grand Total', na=False)]
        db_copying.to_excel(writer, sheet_name='payact', index=False, startrow=writer.sheets['payact'].max_row)

        df_copying_filtered = df_copying_filtered[~df_copying_filtered['Type'].str.contains('Grand Total', na=False)]
        df_copying_filtered.to_excel(writer, sheet_name='Daily consolidate-Res', index=False, startrow=writer.sheets['Daily consolidate-Res'].max_row)

        res_pivot = res_pivot[~res_pivot['ACCOUNT'].str.contains('Grand Total', na=False)]
        res_pivot.to_excel(writer, sheet_name='Res Pivot', index=False)

        date_pivot = date_pivot[~date_pivot['POSTING_DATE'].str.contains('Grand Total', na=False)]
        date_pivot.to_excel(writer, sheet_name='Res Pivot', index=False, startrow=len(res_pivot) + 3)

        manual_res = manual_res[~manual_res['Capture_Terminal_ID'].str.contains('Grand Total', na=False)]
        manual_res.to_excel(writer, sheet_name='Manual voucher - Res', index=False)

        credit_pivot = credit_pivot[~credit_pivot['ACCOUNT'].str.contains('Grand Total', na=False)]
        debit_pivot = debit_pivot[~debit_pivot['ACCOUNT'].str.contains('Grand Total', na=False)]

        credit_pivot.to_excel(writer, sheet_name='Pivot - Manual - Res', index=False)
        debit_pivot.to_excel(writer, sheet_name='Pivot - Manual - Res', index=False, startrow=len(credit_pivot) + 3)

        final_summary = final_summary[~final_summary['BRANCH'].str.contains('Grand Total', na=False)]
        final_summary.to_excel(writer, sheet_name='Tally-Res', index=False)

else:
    with pd.ExcelWriter(path, engine='xlsxwriter') as writer:
        db_copying.to_excel(writer, sheet_name='payact', index=False)
        df_copying_filtered.to_excel(writer, sheet_name='Daily consolidate-Res', index=False)
        res_pivot.to_excel(writer, sheet_name='Res Pivot', index=False)
        date_pivot.to_excel(writer, sheet_name='Res Pivot', index=False, startrow=len(res_pivot) + 3)
        manual_res.to_excel(writer, sheet_name='Manual voucher - Res', index=False)
        credit_pivot.to_excel(writer, sheet_name='Pivot - Manual - Res', index=False)
        debit_pivot.to_excel(writer, sheet_name='Pivot - Manual - Res', index=False, startrow=len(credit_pivot) + 3)
        final_summary.to_excel(writer, sheet_name='Tally-Res', index=False)

print(f"Output saved to: {path}")
